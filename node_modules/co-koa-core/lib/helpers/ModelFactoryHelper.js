"use strict";const mongoose=require("mongoose"),stampit=require("stampit"),TreeAlgorithm=require("./resources/TreeAlgorithm.js"),ModelFactoryHelper=stampit({init(){Object.assign(this,{bindClientModelToSchema:(e,t)=>Object.keys(e).reduce((o,s)=>{switch(s){case"index":case"methods":Object.assign(t[s],e[s]);break;case"statics":o=Object.keys(e[s]),Object.assign(t[s],e[s]);break;case"virtuals":!function(e,t){Object.keys(t).forEach(o=>{const s=e.virtual(o);["get","set"].forEach(e=>{t[o].hasOwnProperty(e)&&s[e](t[o][e])})})}(t,e[s])}return o},[]),buildTypeCallback:e=>(function(t,o){function s(e,t){mongoose.SchemaType.call(this,e,t,c)}const c=o.replace("models","");if(c[0]===c[0].toUpperCase())return s.prototype=Object.create(mongoose.SchemaType.prototype),s.prototype.cast=t,mongoose.Schema.Types[c]=s,mongoose;e.throw("invalidTypeName",c)}),injectSchemaObjectIds(e){TreeAlgorithm(e).process(e=>{if("string"==typeof e.item&&"type"===e.key)switch(e.item){case"ObjectId":case"ForeignKey":case"FK":let t=e._out;e._keyTree.forEach(e=>{t=t[e]}),t[e.key]=mongoose.Schema.Types.ObjectId}})}})}});module.exports=(()=>ModelFactoryHelper());