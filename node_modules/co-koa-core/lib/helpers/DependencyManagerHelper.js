"use strict";const echoHandler=require("echo-handler"),mongoose=require("mongoose"),stampit=require("stampit"),AssetFactory=require("./resources/AssetFactory.js"),AsyncLibrary=require("./resources/AsyncLibrary.js"),TreeAlgorithm=require("./resources/TreeAlgorithm.js"),DependencyManagerHelper=stampit({props:{conf:null,echo:null},init({conf:e=this.conf,libDir:r,parent:t}){const s=echoHandler.configure({factoryOverride:`${r}/i18n/${e.i18n}.depManMessages.json`,logger:e.logger}),n=require(`${e.root}/api/Enums.js`),o=AssetFactory(e,s);this.conf=e,this.echo=s,Object.assign(this,{appendConfigToCallerMethod(){t.call.environment||(delete this.conf.env.mongoDB_URI,Object.assign(t.call,this.conf))},fetchFile(e,r){switch(e){case"Service":const t=this.getter(e,r);return this.parseInstance(t,e,r);case"Validator":const s=this.getter("Model",`validators/${r}`);return this.parseInstance(s,e,r);default:return mongoose.models[r]}},fetchToken(r){switch(r){case":async":return AsyncLibrary();case":echo":return echoHandler.configure(e);case":enums":return n;case":tree":return TreeAlgorithm;default:return o.build(r)}},getter(e,r){try{return require(`${this.conf.root}/api/${e.toLowerCase()}s/${r}`)}catch(e){this.echo.throw("failed",r)}},parseInstance(e,r,s){return"function"==typeof e?Object.assign({},e(t.call)):this.echo.throw("invalidDependencyFile",r,s)}})}});module.exports=((e,r,t)=>DependencyManagerHelper({conf:e,libDir:r,parent:t}));